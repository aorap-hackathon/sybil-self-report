import { ConnectButton } from '@rainbow-me/rainbowkit';
import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { useAccount } from 'wagmi';
import { EvmChains, IndexService, SignProtocolClient, SpMode } from '@ethsign/sp-sdk';
import { useEffect, useState } from 'react';

const signAddressBase = "0x2b3224D080452276a76690341e5Cfa81A945a985";
const schemaIdBase = "0x31";
const fullSchemaIdBase = "onchain_evm_8453_0x31";


const Home: NextPage = () => {
  const { address } = useAccount();

  const [client, setClient] = useState<SignProtocolClient | null>(null);
  const [isSybil, setIsSybil] = useState(false);

  useEffect(() => {
    if (typeof window !== "undefined") {
      console.log("ALL GOOD!")
      // This code runs only on the client-side
      const spClient = new SignProtocolClient(SpMode.OnChain, {
        chain: EvmChains.base,
      });
      setClient(spClient);
      
    }
  }, []);

  useEffect(() => {
    if (!address) return;

    const fetchAttestations = async() => {
      const indexService = new IndexService("mainnet");
      const res = await indexService.queryAttestationList({
        schemaId: fullSchemaIdBase,
        attester: address,
        indexingValue: "sybilreports",
        mode: "onchain",
        page: 1
      });

      let sybil = false;
      res?.rows.forEach(element => {
        if (!element.revoked) {
          if (element.data == "0x0000000000000000000000000000000000000000000000000000000000000001") {
            sybil = true;
          }
        }
      });

      setIsSybil(sybil);
    }
    fetchAttestations();
  }, [address]);

  const handleSelfReport = async() => {
    if (client == null) {
      console.log('client is null');
      return;
    }
    try {
      console.log('add button clicked');
      const createAttestationRes = await client.createAttestation({
        schemaId: schemaIdBase,
        data: { i_am_a_sybil: true },
        indexingValue: "sybilreports",
      });
    } catch (error) {
      console.error('Error self-reporting:', error);
    } finally {

    }
  }

  const handleRevokeSelfReport = async() => {
    if (client == null) {
      console.log('client is null');
      return;
    }
    try {

      // console.log('revoke button clicked');
      const createAttestationRes = await client.revokeAttestation(
        "0x48c4",
      );
    } catch (error) {
      console.error('Error self-reporting:', error);
    } finally {

    }
  }

  const checkSelfReports = async() => {
    if (client == null) {
      console.log('client is null');
      return;
    }
    try {
      const indexService = new IndexService("mainnet");
      const res = await indexService.queryAttestationList({
        schemaId: fullSchemaIdBase,
        attester: address,
        indexingValue: "sybilreports",
        mode: "onchain",
        page: 1
      });
      console.log(res);
    } catch (error) {
      console.error('Error self-reporting:', error);
    } finally {

    }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Sybil self-report</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon/favicon.png" rel="icon" type="image/x-icon" />
      </Head>

      <main className={styles.main}>
        <ConnectButton />
        <button onClick={handleSelfReport} className={styles.modalButton} disabled={isSybil}>
          Self-report
        </button>
        <button onClick={handleRevokeSelfReport} className={styles.modalButton}>
          Revoke self-report
        </button>
        <button onClick={checkSelfReports} className={styles.modalButton}>
          Check self-reports
        </button>

        <h1 className={styles.title}>
          Use this to self-report as a Sybil
        </h1>

        <p className={styles.description}>
          Get started by editing{' '}
          <code className={styles.code}>pages/index.tsx</code>
        </p>

        <div className={styles.grid}>
          <a className={styles.card} href="https://rainbowkit.com">
            <h2>RainbowKit Documentation &rarr;</h2>
            <p>Learn how to customize your wallet connection flow.</p>
          </a>
        </div>
      </main>
    </div>
  );
};

export default Home;
