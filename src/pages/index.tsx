import { ConnectButton } from '@rainbow-me/rainbowkit';
import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { useAccount } from 'wagmi';
import {
  waitForTransactionReceipt,
} from '@wagmi/core';
import { config } from '../wagmi';
import { EvmChains, IndexService, SignProtocolClient, SpMode } from '@ethsign/sp-sdk';
import { useEffect, useState } from 'react';

const signAddressBase = "0x2b3224D080452276a76690341e5Cfa81A945a985";
const schemaIdBase = "0x31";
const fullSchemaIdBase = "onchain_evm_8453_0x31";
const chainId = 8453;


const Home: NextPage = () => {
  const { address } = useAccount();

  const [client, setClient] = useState<SignProtocolClient | null>(null);
  const [isSybil, setIsSybil] = useState(false);
  const [attestationId, setAttestationId] = useState("0x");

  useEffect(() => {
    if (typeof window !== "undefined") {
      console.log("ALL GOOD!")
      // This code runs only on the client-side
      const spClient = new SignProtocolClient(SpMode.OnChain, {
        chain: EvmChains.base,
      });
      setClient(spClient);
      
    }
  }, []);

  const fetchAttestations = async() => {
    console.log('fetching attestations');
    const indexService = new IndexService("mainnet");
    const res = await indexService.queryAttestationList({
      schemaId: fullSchemaIdBase,
      attester: address,
      indexingValue: "sybilreports",
      mode: "onchain",
      page: 1
    });
    console.log(res?.rows);

    let sybil = false;
    res?.rows.forEach(element => {
      if (!element.revoked) {
        if (element.data == "0x0000000000000000000000000000000000000000000000000000000000000001") {
          sybil = true;
          setAttestationId(element.attestationId);
        }
      }
    });

    setIsSybil(sybil);
  }

  useEffect(() => {
    if (!address) return;

    fetchAttestations();
  }, [address]);

  const handleSelfReport = async() => {
    if (client == null) {
      console.log('client is null');
      return;
    }
    try {
      console.log('add button clicked');
      const createAttestationRes = await client.createAttestation({
        schemaId: schemaIdBase,
        data: { i_am_a_sybil: true },
        indexingValue: "sybilreports",
      });
      console.log(createAttestationRes);
      await waitForTransactionReceipt(config, {
        chainId: chainId,
        hash: createAttestationRes.txHash as `0x${string}`,
      });
      console.log('finished waiting for tx');
      setIsSybil(true);

    } catch (error) {
      console.error('Error self-reporting:', error);
    } finally {

    }
  }

  const handleRevokeSelfReport = async() => {
    if (client == null) {
      console.log('client is null');
      return;
    }
    if (attestationId == "0x") {
      console.log('nothing to revoke');
      return;
    }
    try {
      console.log('revoke button clicked');
      const revokeAttestationRes = await client.revokeAttestation(
        attestationId,
      );
      console.log(revokeAttestationRes);
      await waitForTransactionReceipt(config, {
        chainId: chainId,
        hash: revokeAttestationRes.txHash as `0x${string}`,
      });
      setIsSybil(false);

    } catch (error) {
      console.error('Error self-reporting:', error);
    } finally {

    }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Sybil self-report</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon/favicon.png" rel="icon" type="image/x-icon" />
      </Head>

      <main className={styles.main}>
        <ConnectButton />
        <h1 className={styles.title}>
          Use this to self-report as a Sybil
        </h1>
        <h2>{isSybil ? 'YOU ARE SYBIL ‚õîÔ∏è' : 'You are not a sybil ü§ó'}</h2>
        <button onClick={handleSelfReport} className={styles.modalButton} disabled={isSybil}>
          Self-report
        </button>
        <button onClick={handleRevokeSelfReport} className={styles.modalButton} disabled={!isSybil}>
          Revoke self-report
        </button>
      </main>
    </div>
  );
};

export default Home;
